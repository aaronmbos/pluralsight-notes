SOLID Principles
- Steve Smith

Single Responsibility Principle
Open Closed
Liskov Substitution
Interface Segregation
Dependency Inversion

PDD - Pain Driven Development
    Avoid premature optimization
    Utilize SOLID principles to alleviate pain spots in code

Singe Responsibility Principle
    Each software module should have one and only one reason to change
    Separate what from the how in classes and methods
    What is a Responsibility?
        persistence, logging, validation, business logic, etc
    Responsibilities change at different times for different reasons
    Closely related to tight coupling
        Loose coupling offers modular way to choose which details are involved in operation
    Separation of concerns
    Class elements that belong together are cohesive
        Class Cohesion
    Responsibilities are directly related to testability
        Difficult to test one responsibility in isolation
    Key Takeaways
        Practice PDD
        Each class should have a single responsibility or reason to change
        Strive for high cohesion and loose coupling
        Keep classes small, focused, and testable