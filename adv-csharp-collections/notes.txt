Advanced C# Collections
- Simon Robinson

Arrays, Lists, and Collections
  Arrarys are reference types
    Equality is determined based on reference address
      This equality principle holds true for other Collections in .NET as most of them are reference types
      SequenceEqual() can be used to test for element equality (this is not effecient)
  Structure and Purpose of Arrays
    Sized is fixed and can only look up by index
    Arrays under the hood
      Items in array are stored in same sequential block of memory
        Efficient to locate item by index
      Items can't be added because of how they are stored
    List<T> holds reference to an internal array
      Adding item will reallocate/copy old array to new location with additional item
        Add items is slow, but it is possible

Collection Performance
  Performance is measured by how well operations scale when collection size grows
  Removing a list item
    O(n) operation which implies execution times grow directly with size of collection
    O(log n) is similar perf
  Looking up an element
    O(1) operation time which implies constant time
    O(n log n) is similar perf
  O(n^2) very bad and slow
  Be careful calling O(n) methods repeatedly

Inside Dictionaries and Sorted Dictionaries
  Dictionary.TryGetValue approaches O(1)
  Dictionaries have no intrinsic order
  Sorted Dictionary
    Sorts items as added to the dictionary
    Items are sorted by key
  Sorted List
    Internally uses a list to store data
    Uses less memory, but scales worse in comparison to sorted dictionary
  Dictionary Keys
    Equality must be implemented properly for keys
      With custom types this means implementing Equals and GetHashCode correctly
      Dictionaries use Equals() instead of `==` operator
      GetHashCode() generates a hash code and dictionaries rely on the hash to look up values